import{_ as e,H as t,G as a,al as s}from"./chunks/framework.Dt0boiFn.js";const E=JSON.parse('{"title":"冻结属性 Object.freeze | Readonly","description":"Object.freeze() | Ts的Readonly 在vue中的应用","frontmatter":{"title":"冻结属性 Object.freeze | Readonly","description":"Object.freeze() | Ts的Readonly 在vue中的应用"},"headers":[],"relativePath":"web/vue/freeze.md","filePath":"web/vue/freeze.md","lastUpdated":1719018861000}'),i={name:"web/vue/freeze.md"},l=s(`<h1 id="object-freeze-ts的readonly-在vue中的应用" tabindex="-1">Object.freeze() | Ts的Readonly 在vue中的应用 <a class="header-anchor" href="#object-freeze-ts的readonly-在vue中的应用" aria-label="Permalink to &quot;Object.freeze() | Ts的Readonly 在vue中的应用&quot;">​</a></h1><h2 id="相似之处" tabindex="-1">相似之处 <a class="header-anchor" href="#相似之处" aria-label="Permalink to &quot;相似之处&quot;">​</a></h2><ul><li>TypeScript 的 Readonly 和 JavaScript 的 Object.freeze 都会使对象变为只读，即无法修改对象的属性或方法。</li><li>两者都可以用于防止意外修改对象，从而提高代码的安全性。</li></ul><h2 id="不同点" tabindex="-1">不同点 <a class="header-anchor" href="#不同点" aria-label="Permalink to &quot;不同点&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">区别</th><th style="text-align:left;">Readonly</th><th style="text-align:left;">Object.freeze</th></tr></thead><tbody><tr><td style="text-align:left;">作用范围</td><td style="text-align:left;">是一种 TypeScript 类型，它可以用于任何类型的值，包括对象、数组、元组等等</td><td style="text-align:left;">Object.freeze 只能用于 JavaScript 对象</td></tr><tr><td style="text-align:left;">类型检查</td><td style="text-align:left;">可以通过 TypeScript 的类型检查来确保对象是只读的</td><td style="text-align:left;">Object.freeze 只能在运行时检查对象是否被冻结</td></tr><tr><td style="text-align:left;">深度冻结</td><td style="text-align:left;">Readonly 仅对对象本身进行冻结，而不会冻结对象中的嵌套对象</td><td style="text-align:left;">Object.freeze 会递归冻结对象中的所有嵌套对象</td></tr><tr><td style="text-align:left;">性能</td><td style="text-align:left;">Readonly 的性能通常优于 Object.freeze，因为它不需要进行递归冻结</td><td style="text-align:left;"></td></tr></tbody></table><h2 id="vue中的使用" tabindex="-1">vue中的使用 <a class="header-anchor" href="#vue中的使用" aria-label="Permalink to &quot;vue中的使用&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      star: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;杰夫贝佐斯&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;马斯克&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line highlighted has-focus"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      userInfo: Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">freeze</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;一条懒羊羊&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 Object.freeze() 会失去响应式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><code>Readonly</code> 和 <code>Object.freeze</code> 都是使对象变为只读的有效方法。</li><li>在 <code>TypeScript</code> 代码中，建议使用 <code>Readonly</code>，因为它可以提供更好的类型检查和性能。</li><li>在 <code>JavaScript</code> 代码中，可以使用 <code>Object.freeze</code> 来冻结对象，但需要注意其性能问题。</li></ul>`,9),n=[l];function d(h,r,p,c,o,k){return a(),t("div",null,n)}const f=e(i,[["render",d]]);export{E as __pageData,f as default};
